schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "contact_group"
"""
type contact_group {
  """An object relationship"""
  contact: contacts!
  contact_id: Int!

  """An object relationship"""
  group: groups!
  group_id: Int!
}

"""
aggregated selection of "contact_group"
"""
type contact_group_aggregate {
  aggregate: contact_group_aggregate_fields
  nodes: [contact_group!]!
}

input contact_group_aggregate_bool_exp {
  count: contact_group_aggregate_bool_exp_count
}

input contact_group_aggregate_bool_exp_count {
  arguments: [contact_group_select_column!]
  distinct: Boolean
  filter: contact_group_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contact_group"
"""
type contact_group_aggregate_fields {
  avg: contact_group_avg_fields
  count(columns: [contact_group_select_column!], distinct: Boolean): Int!
  max: contact_group_max_fields
  min: contact_group_min_fields
  stddev: contact_group_stddev_fields
  stddev_pop: contact_group_stddev_pop_fields
  stddev_samp: contact_group_stddev_samp_fields
  sum: contact_group_sum_fields
  var_pop: contact_group_var_pop_fields
  var_samp: contact_group_var_samp_fields
  variance: contact_group_variance_fields
}

"""
order by aggregate values of table "contact_group"
"""
input contact_group_aggregate_order_by {
  avg: contact_group_avg_order_by
  count: order_by
  max: contact_group_max_order_by
  min: contact_group_min_order_by
  stddev: contact_group_stddev_order_by
  stddev_pop: contact_group_stddev_pop_order_by
  stddev_samp: contact_group_stddev_samp_order_by
  sum: contact_group_sum_order_by
  var_pop: contact_group_var_pop_order_by
  var_samp: contact_group_var_samp_order_by
  variance: contact_group_variance_order_by
}

"""
input type for inserting array relation for remote table "contact_group"
"""
input contact_group_arr_rel_insert_input {
  data: [contact_group_insert_input!]!

  """upsert condition"""
  on_conflict: contact_group_on_conflict
}

"""aggregate avg on columns"""
type contact_group_avg_fields {
  contact_id: Float
  group_id: Float
}

"""
order by avg() on columns of table "contact_group"
"""
input contact_group_avg_order_by {
  contact_id: order_by
  group_id: order_by
}

"""
Boolean expression to filter rows from the table "contact_group". All fields are combined with a logical 'AND'.
"""
input contact_group_bool_exp {
  _and: [contact_group_bool_exp!]
  _not: contact_group_bool_exp
  _or: [contact_group_bool_exp!]
  contact: contacts_bool_exp
  contact_id: Int_comparison_exp
  group: groups_bool_exp
  group_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "contact_group"
"""
enum contact_group_constraint {
  """
  unique or primary key constraint on columns "contact_id", "group_id"
  """
  contact_group_pkey
}

"""
input type for incrementing numeric columns in table "contact_group"
"""
input contact_group_inc_input {
  contact_id: Int
  group_id: Int
}

"""
input type for inserting data into table "contact_group"
"""
input contact_group_insert_input {
  contact: contacts_obj_rel_insert_input
  contact_id: Int
  group: groups_obj_rel_insert_input
  group_id: Int
}

"""aggregate max on columns"""
type contact_group_max_fields {
  contact_id: Int
  group_id: Int
}

"""
order by max() on columns of table "contact_group"
"""
input contact_group_max_order_by {
  contact_id: order_by
  group_id: order_by
}

"""aggregate min on columns"""
type contact_group_min_fields {
  contact_id: Int
  group_id: Int
}

"""
order by min() on columns of table "contact_group"
"""
input contact_group_min_order_by {
  contact_id: order_by
  group_id: order_by
}

"""
response of any mutation on the table "contact_group"
"""
type contact_group_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [contact_group!]!
}

"""
on_conflict condition type for table "contact_group"
"""
input contact_group_on_conflict {
  constraint: contact_group_constraint!
  update_columns: [contact_group_update_column!]! = []
  where: contact_group_bool_exp
}

"""Ordering options when selecting data from "contact_group"."""
input contact_group_order_by {
  contact: contacts_order_by
  contact_id: order_by
  group: groups_order_by
  group_id: order_by
}

"""primary key columns input for table: contact_group"""
input contact_group_pk_columns_input {
  contact_id: Int!
  group_id: Int!
}

"""
select columns of table "contact_group"
"""
enum contact_group_select_column {
  """column name"""
  contact_id

  """column name"""
  group_id
}

"""
input type for updating data in table "contact_group"
"""
input contact_group_set_input {
  contact_id: Int
  group_id: Int
}

"""aggregate stddev on columns"""
type contact_group_stddev_fields {
  contact_id: Float
  group_id: Float
}

"""
order by stddev() on columns of table "contact_group"
"""
input contact_group_stddev_order_by {
  contact_id: order_by
  group_id: order_by
}

"""aggregate stddev_pop on columns"""
type contact_group_stddev_pop_fields {
  contact_id: Float
  group_id: Float
}

"""
order by stddev_pop() on columns of table "contact_group"
"""
input contact_group_stddev_pop_order_by {
  contact_id: order_by
  group_id: order_by
}

"""aggregate stddev_samp on columns"""
type contact_group_stddev_samp_fields {
  contact_id: Float
  group_id: Float
}

"""
order by stddev_samp() on columns of table "contact_group"
"""
input contact_group_stddev_samp_order_by {
  contact_id: order_by
  group_id: order_by
}

"""
Streaming cursor of the table "contact_group"
"""
input contact_group_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contact_group_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contact_group_stream_cursor_value_input {
  contact_id: Int
  group_id: Int
}

"""aggregate sum on columns"""
type contact_group_sum_fields {
  contact_id: Int
  group_id: Int
}

"""
order by sum() on columns of table "contact_group"
"""
input contact_group_sum_order_by {
  contact_id: order_by
  group_id: order_by
}

"""
update columns of table "contact_group"
"""
enum contact_group_update_column {
  """column name"""
  contact_id

  """column name"""
  group_id
}

input contact_group_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: contact_group_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: contact_group_set_input

  """filter the rows which have to be updated"""
  where: contact_group_bool_exp!
}

"""aggregate var_pop on columns"""
type contact_group_var_pop_fields {
  contact_id: Float
  group_id: Float
}

"""
order by var_pop() on columns of table "contact_group"
"""
input contact_group_var_pop_order_by {
  contact_id: order_by
  group_id: order_by
}

"""aggregate var_samp on columns"""
type contact_group_var_samp_fields {
  contact_id: Float
  group_id: Float
}

"""
order by var_samp() on columns of table "contact_group"
"""
input contact_group_var_samp_order_by {
  contact_id: order_by
  group_id: order_by
}

"""aggregate variance on columns"""
type contact_group_variance_fields {
  contact_id: Float
  group_id: Float
}

"""
order by variance() on columns of table "contact_group"
"""
input contact_group_variance_order_by {
  contact_id: order_by
  group_id: order_by
}

"""
columns and relationships of "contacts"
"""
type contacts {
  """An array relationship"""
  contact_groups(
    """distinct select on columns"""
    distinct_on: [contact_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contact_group_order_by!]

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): [contact_group!]!

  """An aggregate relationship"""
  contact_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [contact_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contact_group_order_by!]

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): contact_group_aggregate!
  date_added: timestamptz!
  desires: [jsonb!]
  email: String
  frequency(
    """JSON select path"""
    path: String
  ): jsonb
  id: Int!
  images: [jsonb!]

  """An array relationship"""
  logs(
    """distinct select on columns"""
    distinct_on: [logs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [logs_order_by!]

    """filter the rows returned"""
    where: logs_bool_exp
  ): [logs!]!

  """An aggregate relationship"""
  logs_aggregate(
    """distinct select on columns"""
    distinct_on: [logs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [logs_order_by!]

    """filter the rows returned"""
    where: logs_bool_exp
  ): logs_aggregate!
  name: String!
  need_to_call: Boolean
  notes: String
  phone_number: String

  """An array relationship"""
  reminders(
    """distinct select on columns"""
    distinct_on: [reminders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reminders_order_by!]

    """filter the rows returned"""
    where: reminders_bool_exp
  ): [reminders!]!

  """An aggregate relationship"""
  reminders_aggregate(
    """distinct select on columns"""
    distinct_on: [reminders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reminders_order_by!]

    """filter the rows returned"""
    where: reminders_bool_exp
  ): reminders_aggregate!
}

"""
aggregated selection of "contacts"
"""
type contacts_aggregate {
  aggregate: contacts_aggregate_fields
  nodes: [contacts!]!
}

"""
aggregate fields of "contacts"
"""
type contacts_aggregate_fields {
  avg: contacts_avg_fields
  count(columns: [contacts_select_column!], distinct: Boolean): Int!
  max: contacts_max_fields
  min: contacts_min_fields
  stddev: contacts_stddev_fields
  stddev_pop: contacts_stddev_pop_fields
  stddev_samp: contacts_stddev_samp_fields
  sum: contacts_sum_fields
  var_pop: contacts_var_pop_fields
  var_samp: contacts_var_samp_fields
  variance: contacts_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input contacts_append_input {
  frequency: jsonb
}

"""aggregate avg on columns"""
type contacts_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "contacts". All fields are combined with a logical 'AND'.
"""
input contacts_bool_exp {
  _and: [contacts_bool_exp!]
  _not: contacts_bool_exp
  _or: [contacts_bool_exp!]
  contact_groups: contact_group_bool_exp
  contact_groups_aggregate: contact_group_aggregate_bool_exp
  date_added: timestamptz_comparison_exp
  desires: jsonb_array_comparison_exp
  email: String_comparison_exp
  frequency: jsonb_comparison_exp
  id: Int_comparison_exp
  images: jsonb_array_comparison_exp
  logs: logs_bool_exp
  logs_aggregate: logs_aggregate_bool_exp
  name: String_comparison_exp
  need_to_call: Boolean_comparison_exp
  notes: String_comparison_exp
  phone_number: String_comparison_exp
  reminders: reminders_bool_exp
  reminders_aggregate: reminders_aggregate_bool_exp
}

"""
unique or primary key constraints on table "contacts"
"""
enum contacts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  contacts_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input contacts_delete_at_path_input {
  frequency: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input contacts_delete_elem_input {
  frequency: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input contacts_delete_key_input {
  frequency: String
}

"""
input type for incrementing numeric columns in table "contacts"
"""
input contacts_inc_input {
  id: Int
}

"""
input type for inserting data into table "contacts"
"""
input contacts_insert_input {
  contact_groups: contact_group_arr_rel_insert_input
  date_added: timestamptz
  desires: [jsonb!]
  email: String
  frequency: jsonb
  id: Int
  images: [jsonb!]
  logs: logs_arr_rel_insert_input
  name: String
  need_to_call: Boolean
  notes: String
  phone_number: String
  reminders: reminders_arr_rel_insert_input
}

"""aggregate max on columns"""
type contacts_max_fields {
  date_added: timestamptz
  desires: [jsonb!]
  email: String
  id: Int
  images: [jsonb!]
  name: String
  notes: String
  phone_number: String
}

"""aggregate min on columns"""
type contacts_min_fields {
  date_added: timestamptz
  desires: [jsonb!]
  email: String
  id: Int
  images: [jsonb!]
  name: String
  notes: String
  phone_number: String
}

"""
response of any mutation on the table "contacts"
"""
type contacts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [contacts!]!
}

"""
input type for inserting object relation for remote table "contacts"
"""
input contacts_obj_rel_insert_input {
  data: contacts_insert_input!

  """upsert condition"""
  on_conflict: contacts_on_conflict
}

"""
on_conflict condition type for table "contacts"
"""
input contacts_on_conflict {
  constraint: contacts_constraint!
  update_columns: [contacts_update_column!]! = []
  where: contacts_bool_exp
}

"""Ordering options when selecting data from "contacts"."""
input contacts_order_by {
  contact_groups_aggregate: contact_group_aggregate_order_by
  date_added: order_by
  desires: order_by
  email: order_by
  frequency: order_by
  id: order_by
  images: order_by
  logs_aggregate: logs_aggregate_order_by
  name: order_by
  need_to_call: order_by
  notes: order_by
  phone_number: order_by
  reminders_aggregate: reminders_aggregate_order_by
}

"""primary key columns input for table: contacts"""
input contacts_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input contacts_prepend_input {
  frequency: jsonb
}

"""
select columns of table "contacts"
"""
enum contacts_select_column {
  """column name"""
  date_added

  """column name"""
  desires

  """column name"""
  email

  """column name"""
  frequency

  """column name"""
  id

  """column name"""
  images

  """column name"""
  name

  """column name"""
  need_to_call

  """column name"""
  notes

  """column name"""
  phone_number
}

"""
input type for updating data in table "contacts"
"""
input contacts_set_input {
  date_added: timestamptz
  desires: [jsonb!]
  email: String
  frequency: jsonb
  id: Int
  images: [jsonb!]
  name: String
  need_to_call: Boolean
  notes: String
  phone_number: String
}

"""aggregate stddev on columns"""
type contacts_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type contacts_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type contacts_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "contacts"
"""
input contacts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contacts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contacts_stream_cursor_value_input {
  date_added: timestamptz
  desires: [jsonb!]
  email: String
  frequency: jsonb
  id: Int
  images: [jsonb!]
  name: String
  need_to_call: Boolean
  notes: String
  phone_number: String
}

"""aggregate sum on columns"""
type contacts_sum_fields {
  id: Int
}

"""
update columns of table "contacts"
"""
enum contacts_update_column {
  """column name"""
  date_added

  """column name"""
  desires

  """column name"""
  email

  """column name"""
  frequency

  """column name"""
  id

  """column name"""
  images

  """column name"""
  name

  """column name"""
  need_to_call

  """column name"""
  notes

  """column name"""
  phone_number
}

input contacts_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: contacts_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: contacts_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: contacts_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: contacts_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: contacts_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: contacts_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: contacts_set_input

  """filter the rows which have to be updated"""
  where: contacts_bool_exp!
}

"""aggregate var_pop on columns"""
type contacts_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type contacts_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type contacts_variance_fields {
  id: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "groups"
"""
type groups {
  """An array relationship"""
  contact_groups(
    """distinct select on columns"""
    distinct_on: [contact_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contact_group_order_by!]

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): [contact_group!]!

  """An aggregate relationship"""
  contact_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [contact_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contact_group_order_by!]

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): contact_group_aggregate!
  frequency(
    """JSON select path"""
    path: String
  ): jsonb!
  id: Int!
  name: String!
}

"""
aggregated selection of "groups"
"""
type groups_aggregate {
  aggregate: groups_aggregate_fields
  nodes: [groups!]!
}

"""
aggregate fields of "groups"
"""
type groups_aggregate_fields {
  avg: groups_avg_fields
  count(columns: [groups_select_column!], distinct: Boolean): Int!
  max: groups_max_fields
  min: groups_min_fields
  stddev: groups_stddev_fields
  stddev_pop: groups_stddev_pop_fields
  stddev_samp: groups_stddev_samp_fields
  sum: groups_sum_fields
  var_pop: groups_var_pop_fields
  var_samp: groups_var_samp_fields
  variance: groups_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input groups_append_input {
  frequency: jsonb
}

"""aggregate avg on columns"""
type groups_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "groups". All fields are combined with a logical 'AND'.
"""
input groups_bool_exp {
  _and: [groups_bool_exp!]
  _not: groups_bool_exp
  _or: [groups_bool_exp!]
  contact_groups: contact_group_bool_exp
  contact_groups_aggregate: contact_group_aggregate_bool_exp
  frequency: jsonb_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "groups"
"""
enum groups_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  groups_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input groups_delete_at_path_input {
  frequency: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input groups_delete_elem_input {
  frequency: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input groups_delete_key_input {
  frequency: String
}

"""
input type for incrementing numeric columns in table "groups"
"""
input groups_inc_input {
  id: Int
}

"""
input type for inserting data into table "groups"
"""
input groups_insert_input {
  contact_groups: contact_group_arr_rel_insert_input
  frequency: jsonb
  id: Int
  name: String
}

"""aggregate max on columns"""
type groups_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type groups_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "groups"
"""
type groups_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [groups!]!
}

"""
input type for inserting object relation for remote table "groups"
"""
input groups_obj_rel_insert_input {
  data: groups_insert_input!

  """upsert condition"""
  on_conflict: groups_on_conflict
}

"""
on_conflict condition type for table "groups"
"""
input groups_on_conflict {
  constraint: groups_constraint!
  update_columns: [groups_update_column!]! = []
  where: groups_bool_exp
}

"""Ordering options when selecting data from "groups"."""
input groups_order_by {
  contact_groups_aggregate: contact_group_aggregate_order_by
  frequency: order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: groups"""
input groups_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input groups_prepend_input {
  frequency: jsonb
}

"""
select columns of table "groups"
"""
enum groups_select_column {
  """column name"""
  frequency

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "groups"
"""
input groups_set_input {
  frequency: jsonb
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type groups_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type groups_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type groups_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "groups"
"""
input groups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: groups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input groups_stream_cursor_value_input {
  frequency: jsonb
  id: Int
  name: String
}

"""aggregate sum on columns"""
type groups_sum_fields {
  id: Int
}

"""
update columns of table "groups"
"""
enum groups_update_column {
  """column name"""
  frequency

  """column name"""
  id

  """column name"""
  name
}

input groups_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: groups_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: groups_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: groups_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: groups_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: groups_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: groups_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: groups_set_input

  """filter the rows which have to be updated"""
  where: groups_bool_exp!
}

"""aggregate var_pop on columns"""
type groups_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type groups_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type groups_variance_fields {
  id: Float
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [jsonb!]

  """does the array contain the given value"""
  _contains: [jsonb!]
  _eq: [jsonb!]
  _gt: [jsonb!]
  _gte: [jsonb!]
  _in: [[jsonb!]!]
  _is_null: Boolean
  _lt: [jsonb!]
  _lte: [jsonb!]
  _neq: [jsonb!]
  _nin: [[jsonb!]!]
}

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "logs"
"""
type logs {
  """An object relationship"""
  contact: contacts!
  contact_id: Int!
  id: Int!
  notes: String!
  time: timestamptz!

  """call/message/meeting/skip"""
  type: String!
}

"""
aggregated selection of "logs"
"""
type logs_aggregate {
  aggregate: logs_aggregate_fields
  nodes: [logs!]!
}

input logs_aggregate_bool_exp {
  count: logs_aggregate_bool_exp_count
}

input logs_aggregate_bool_exp_count {
  arguments: [logs_select_column!]
  distinct: Boolean
  filter: logs_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "logs"
"""
type logs_aggregate_fields {
  avg: logs_avg_fields
  count(columns: [logs_select_column!], distinct: Boolean): Int!
  max: logs_max_fields
  min: logs_min_fields
  stddev: logs_stddev_fields
  stddev_pop: logs_stddev_pop_fields
  stddev_samp: logs_stddev_samp_fields
  sum: logs_sum_fields
  var_pop: logs_var_pop_fields
  var_samp: logs_var_samp_fields
  variance: logs_variance_fields
}

"""
order by aggregate values of table "logs"
"""
input logs_aggregate_order_by {
  avg: logs_avg_order_by
  count: order_by
  max: logs_max_order_by
  min: logs_min_order_by
  stddev: logs_stddev_order_by
  stddev_pop: logs_stddev_pop_order_by
  stddev_samp: logs_stddev_samp_order_by
  sum: logs_sum_order_by
  var_pop: logs_var_pop_order_by
  var_samp: logs_var_samp_order_by
  variance: logs_variance_order_by
}

"""
input type for inserting array relation for remote table "logs"
"""
input logs_arr_rel_insert_input {
  data: [logs_insert_input!]!

  """upsert condition"""
  on_conflict: logs_on_conflict
}

"""aggregate avg on columns"""
type logs_avg_fields {
  contact_id: Float
  id: Float
}

"""
order by avg() on columns of table "logs"
"""
input logs_avg_order_by {
  contact_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "logs". All fields are combined with a logical 'AND'.
"""
input logs_bool_exp {
  _and: [logs_bool_exp!]
  _not: logs_bool_exp
  _or: [logs_bool_exp!]
  contact: contacts_bool_exp
  contact_id: Int_comparison_exp
  id: Int_comparison_exp
  notes: String_comparison_exp
  time: timestamptz_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "logs"
"""
enum logs_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  logs_pkey
}

"""
input type for incrementing numeric columns in table "logs"
"""
input logs_inc_input {
  contact_id: Int
  id: Int
}

"""
input type for inserting data into table "logs"
"""
input logs_insert_input {
  contact: contacts_obj_rel_insert_input
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz

  """call/message/meeting/skip"""
  type: String
}

"""aggregate max on columns"""
type logs_max_fields {
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz

  """call/message/meeting/skip"""
  type: String
}

"""
order by max() on columns of table "logs"
"""
input logs_max_order_by {
  contact_id: order_by
  id: order_by
  notes: order_by
  time: order_by

  """call/message/meeting/skip"""
  type: order_by
}

"""aggregate min on columns"""
type logs_min_fields {
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz

  """call/message/meeting/skip"""
  type: String
}

"""
order by min() on columns of table "logs"
"""
input logs_min_order_by {
  contact_id: order_by
  id: order_by
  notes: order_by
  time: order_by

  """call/message/meeting/skip"""
  type: order_by
}

"""
response of any mutation on the table "logs"
"""
type logs_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [logs!]!
}

"""
on_conflict condition type for table "logs"
"""
input logs_on_conflict {
  constraint: logs_constraint!
  update_columns: [logs_update_column!]! = []
  where: logs_bool_exp
}

"""Ordering options when selecting data from "logs"."""
input logs_order_by {
  contact: contacts_order_by
  contact_id: order_by
  id: order_by
  notes: order_by
  time: order_by
  type: order_by
}

"""primary key columns input for table: logs"""
input logs_pk_columns_input {
  id: Int!
}

"""
select columns of table "logs"
"""
enum logs_select_column {
  """column name"""
  contact_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  time

  """column name"""
  type
}

"""
input type for updating data in table "logs"
"""
input logs_set_input {
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz

  """call/message/meeting/skip"""
  type: String
}

"""aggregate stddev on columns"""
type logs_stddev_fields {
  contact_id: Float
  id: Float
}

"""
order by stddev() on columns of table "logs"
"""
input logs_stddev_order_by {
  contact_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type logs_stddev_pop_fields {
  contact_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "logs"
"""
input logs_stddev_pop_order_by {
  contact_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type logs_stddev_samp_fields {
  contact_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "logs"
"""
input logs_stddev_samp_order_by {
  contact_id: order_by
  id: order_by
}

"""
Streaming cursor of the table "logs"
"""
input logs_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: logs_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input logs_stream_cursor_value_input {
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz

  """call/message/meeting/skip"""
  type: String
}

"""aggregate sum on columns"""
type logs_sum_fields {
  contact_id: Int
  id: Int
}

"""
order by sum() on columns of table "logs"
"""
input logs_sum_order_by {
  contact_id: order_by
  id: order_by
}

"""
update columns of table "logs"
"""
enum logs_update_column {
  """column name"""
  contact_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  time

  """column name"""
  type
}

input logs_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: logs_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: logs_set_input

  """filter the rows which have to be updated"""
  where: logs_bool_exp!
}

"""aggregate var_pop on columns"""
type logs_var_pop_fields {
  contact_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "logs"
"""
input logs_var_pop_order_by {
  contact_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type logs_var_samp_fields {
  contact_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "logs"
"""
input logs_var_samp_order_by {
  contact_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type logs_variance_fields {
  contact_id: Float
  id: Float
}

"""
order by variance() on columns of table "logs"
"""
input logs_variance_order_by {
  contact_id: order_by
  id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "contact_group"
  """
  delete_contact_group(
    """filter the rows which have to be deleted"""
    where: contact_group_bool_exp!
  ): contact_group_mutation_response

  """
  delete single row from the table: "contact_group"
  """
  delete_contact_group_by_pk(contact_id: Int!, group_id: Int!): contact_group

  """
  delete data from the table: "contacts"
  """
  delete_contacts(
    """filter the rows which have to be deleted"""
    where: contacts_bool_exp!
  ): contacts_mutation_response

  """
  delete single row from the table: "contacts"
  """
  delete_contacts_by_pk(id: Int!): contacts

  """
  delete data from the table: "groups"
  """
  delete_groups(
    """filter the rows which have to be deleted"""
    where: groups_bool_exp!
  ): groups_mutation_response

  """
  delete single row from the table: "groups"
  """
  delete_groups_by_pk(id: Int!): groups

  """
  delete data from the table: "logs"
  """
  delete_logs(
    """filter the rows which have to be deleted"""
    where: logs_bool_exp!
  ): logs_mutation_response

  """
  delete single row from the table: "logs"
  """
  delete_logs_by_pk(id: Int!): logs

  """
  delete data from the table: "reminders"
  """
  delete_reminders(
    """filter the rows which have to be deleted"""
    where: reminders_bool_exp!
  ): reminders_mutation_response

  """
  delete single row from the table: "reminders"
  """
  delete_reminders_by_pk(id: Int!): reminders

  """
  insert data into the table: "contact_group"
  """
  insert_contact_group(
    """the rows to be inserted"""
    objects: [contact_group_insert_input!]!

    """upsert condition"""
    on_conflict: contact_group_on_conflict
  ): contact_group_mutation_response

  """
  insert a single row into the table: "contact_group"
  """
  insert_contact_group_one(
    """the row to be inserted"""
    object: contact_group_insert_input!

    """upsert condition"""
    on_conflict: contact_group_on_conflict
  ): contact_group

  """
  insert data into the table: "contacts"
  """
  insert_contacts(
    """the rows to be inserted"""
    objects: [contacts_insert_input!]!

    """upsert condition"""
    on_conflict: contacts_on_conflict
  ): contacts_mutation_response

  """
  insert a single row into the table: "contacts"
  """
  insert_contacts_one(
    """the row to be inserted"""
    object: contacts_insert_input!

    """upsert condition"""
    on_conflict: contacts_on_conflict
  ): contacts

  """
  insert data into the table: "groups"
  """
  insert_groups(
    """the rows to be inserted"""
    objects: [groups_insert_input!]!

    """upsert condition"""
    on_conflict: groups_on_conflict
  ): groups_mutation_response

  """
  insert a single row into the table: "groups"
  """
  insert_groups_one(
    """the row to be inserted"""
    object: groups_insert_input!

    """upsert condition"""
    on_conflict: groups_on_conflict
  ): groups

  """
  insert data into the table: "logs"
  """
  insert_logs(
    """the rows to be inserted"""
    objects: [logs_insert_input!]!

    """upsert condition"""
    on_conflict: logs_on_conflict
  ): logs_mutation_response

  """
  insert a single row into the table: "logs"
  """
  insert_logs_one(
    """the row to be inserted"""
    object: logs_insert_input!

    """upsert condition"""
    on_conflict: logs_on_conflict
  ): logs

  """
  insert data into the table: "reminders"
  """
  insert_reminders(
    """the rows to be inserted"""
    objects: [reminders_insert_input!]!

    """upsert condition"""
    on_conflict: reminders_on_conflict
  ): reminders_mutation_response

  """
  insert a single row into the table: "reminders"
  """
  insert_reminders_one(
    """the row to be inserted"""
    object: reminders_insert_input!

    """upsert condition"""
    on_conflict: reminders_on_conflict
  ): reminders

  """
  update data of the table: "contact_group"
  """
  update_contact_group(
    """increments the numeric columns with given value of the filtered values"""
    _inc: contact_group_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: contact_group_set_input

    """filter the rows which have to be updated"""
    where: contact_group_bool_exp!
  ): contact_group_mutation_response

  """
  update single row of the table: "contact_group"
  """
  update_contact_group_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: contact_group_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: contact_group_set_input
    pk_columns: contact_group_pk_columns_input!
  ): contact_group

  """
  update multiples rows of table: "contact_group"
  """
  update_contact_group_many(
    """updates to execute, in order"""
    updates: [contact_group_updates!]!
  ): [contact_group_mutation_response]

  """
  update data of the table: "contacts"
  """
  update_contacts(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: contacts_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: contacts_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: contacts_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: contacts_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: contacts_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: contacts_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: contacts_set_input

    """filter the rows which have to be updated"""
    where: contacts_bool_exp!
  ): contacts_mutation_response

  """
  update single row of the table: "contacts"
  """
  update_contacts_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: contacts_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: contacts_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: contacts_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: contacts_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: contacts_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: contacts_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: contacts_set_input
    pk_columns: contacts_pk_columns_input!
  ): contacts

  """
  update multiples rows of table: "contacts"
  """
  update_contacts_many(
    """updates to execute, in order"""
    updates: [contacts_updates!]!
  ): [contacts_mutation_response]

  """
  update data of the table: "groups"
  """
  update_groups(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: groups_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: groups_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: groups_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: groups_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: groups_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: groups_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: groups_set_input

    """filter the rows which have to be updated"""
    where: groups_bool_exp!
  ): groups_mutation_response

  """
  update single row of the table: "groups"
  """
  update_groups_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: groups_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: groups_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: groups_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: groups_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: groups_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: groups_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: groups_set_input
    pk_columns: groups_pk_columns_input!
  ): groups

  """
  update multiples rows of table: "groups"
  """
  update_groups_many(
    """updates to execute, in order"""
    updates: [groups_updates!]!
  ): [groups_mutation_response]

  """
  update data of the table: "logs"
  """
  update_logs(
    """increments the numeric columns with given value of the filtered values"""
    _inc: logs_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: logs_set_input

    """filter the rows which have to be updated"""
    where: logs_bool_exp!
  ): logs_mutation_response

  """
  update single row of the table: "logs"
  """
  update_logs_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: logs_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: logs_set_input
    pk_columns: logs_pk_columns_input!
  ): logs

  """
  update multiples rows of table: "logs"
  """
  update_logs_many(
    """updates to execute, in order"""
    updates: [logs_updates!]!
  ): [logs_mutation_response]

  """
  update data of the table: "reminders"
  """
  update_reminders(
    """increments the numeric columns with given value of the filtered values"""
    _inc: reminders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reminders_set_input

    """filter the rows which have to be updated"""
    where: reminders_bool_exp!
  ): reminders_mutation_response

  """
  update single row of the table: "reminders"
  """
  update_reminders_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: reminders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reminders_set_input
    pk_columns: reminders_pk_columns_input!
  ): reminders

  """
  update multiples rows of table: "reminders"
  """
  update_reminders_many(
    """updates to execute, in order"""
    updates: [reminders_updates!]!
  ): [reminders_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "contact_group"
  """
  contact_group(
    """distinct select on columns"""
    distinct_on: [contact_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contact_group_order_by!]

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): [contact_group!]!

  """
  fetch aggregated fields from the table: "contact_group"
  """
  contact_group_aggregate(
    """distinct select on columns"""
    distinct_on: [contact_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contact_group_order_by!]

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): contact_group_aggregate!

  """fetch data from the table: "contact_group" using primary key columns"""
  contact_group_by_pk(contact_id: Int!, group_id: Int!): contact_group

  """
  fetch data from the table: "contacts"
  """
  contacts(
    """distinct select on columns"""
    distinct_on: [contacts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contacts_order_by!]

    """filter the rows returned"""
    where: contacts_bool_exp
  ): [contacts!]!

  """
  fetch aggregated fields from the table: "contacts"
  """
  contacts_aggregate(
    """distinct select on columns"""
    distinct_on: [contacts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contacts_order_by!]

    """filter the rows returned"""
    where: contacts_bool_exp
  ): contacts_aggregate!

  """fetch data from the table: "contacts" using primary key columns"""
  contacts_by_pk(id: Int!): contacts

  """
  fetch data from the table: "groups"
  """
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  fetch aggregated fields from the table: "groups"
  """
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """fetch data from the table: "groups" using primary key columns"""
  groups_by_pk(id: Int!): groups

  """An array relationship"""
  logs(
    """distinct select on columns"""
    distinct_on: [logs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [logs_order_by!]

    """filter the rows returned"""
    where: logs_bool_exp
  ): [logs!]!

  """An aggregate relationship"""
  logs_aggregate(
    """distinct select on columns"""
    distinct_on: [logs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [logs_order_by!]

    """filter the rows returned"""
    where: logs_bool_exp
  ): logs_aggregate!

  """fetch data from the table: "logs" using primary key columns"""
  logs_by_pk(id: Int!): logs

  """An array relationship"""
  reminders(
    """distinct select on columns"""
    distinct_on: [reminders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reminders_order_by!]

    """filter the rows returned"""
    where: reminders_bool_exp
  ): [reminders!]!

  """An aggregate relationship"""
  reminders_aggregate(
    """distinct select on columns"""
    distinct_on: [reminders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reminders_order_by!]

    """filter the rows returned"""
    where: reminders_bool_exp
  ): reminders_aggregate!

  """fetch data from the table: "reminders" using primary key columns"""
  reminders_by_pk(id: Int!): reminders
}

"""
columns and relationships of "reminders"
"""
type reminders {
  """An object relationship"""
  contact: contacts!
  contact_id: Int!
  id: Int!
  notes: String!
  time: timestamptz!
}

"""
aggregated selection of "reminders"
"""
type reminders_aggregate {
  aggregate: reminders_aggregate_fields
  nodes: [reminders!]!
}

input reminders_aggregate_bool_exp {
  count: reminders_aggregate_bool_exp_count
}

input reminders_aggregate_bool_exp_count {
  arguments: [reminders_select_column!]
  distinct: Boolean
  filter: reminders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "reminders"
"""
type reminders_aggregate_fields {
  avg: reminders_avg_fields
  count(columns: [reminders_select_column!], distinct: Boolean): Int!
  max: reminders_max_fields
  min: reminders_min_fields
  stddev: reminders_stddev_fields
  stddev_pop: reminders_stddev_pop_fields
  stddev_samp: reminders_stddev_samp_fields
  sum: reminders_sum_fields
  var_pop: reminders_var_pop_fields
  var_samp: reminders_var_samp_fields
  variance: reminders_variance_fields
}

"""
order by aggregate values of table "reminders"
"""
input reminders_aggregate_order_by {
  avg: reminders_avg_order_by
  count: order_by
  max: reminders_max_order_by
  min: reminders_min_order_by
  stddev: reminders_stddev_order_by
  stddev_pop: reminders_stddev_pop_order_by
  stddev_samp: reminders_stddev_samp_order_by
  sum: reminders_sum_order_by
  var_pop: reminders_var_pop_order_by
  var_samp: reminders_var_samp_order_by
  variance: reminders_variance_order_by
}

"""
input type for inserting array relation for remote table "reminders"
"""
input reminders_arr_rel_insert_input {
  data: [reminders_insert_input!]!

  """upsert condition"""
  on_conflict: reminders_on_conflict
}

"""aggregate avg on columns"""
type reminders_avg_fields {
  contact_id: Float
  id: Float
}

"""
order by avg() on columns of table "reminders"
"""
input reminders_avg_order_by {
  contact_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "reminders". All fields are combined with a logical 'AND'.
"""
input reminders_bool_exp {
  _and: [reminders_bool_exp!]
  _not: reminders_bool_exp
  _or: [reminders_bool_exp!]
  contact: contacts_bool_exp
  contact_id: Int_comparison_exp
  id: Int_comparison_exp
  notes: String_comparison_exp
  time: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "reminders"
"""
enum reminders_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  reminders_pkey
}

"""
input type for incrementing numeric columns in table "reminders"
"""
input reminders_inc_input {
  contact_id: Int
  id: Int
}

"""
input type for inserting data into table "reminders"
"""
input reminders_insert_input {
  contact: contacts_obj_rel_insert_input
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz
}

"""aggregate max on columns"""
type reminders_max_fields {
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz
}

"""
order by max() on columns of table "reminders"
"""
input reminders_max_order_by {
  contact_id: order_by
  id: order_by
  notes: order_by
  time: order_by
}

"""aggregate min on columns"""
type reminders_min_fields {
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz
}

"""
order by min() on columns of table "reminders"
"""
input reminders_min_order_by {
  contact_id: order_by
  id: order_by
  notes: order_by
  time: order_by
}

"""
response of any mutation on the table "reminders"
"""
type reminders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [reminders!]!
}

"""
on_conflict condition type for table "reminders"
"""
input reminders_on_conflict {
  constraint: reminders_constraint!
  update_columns: [reminders_update_column!]! = []
  where: reminders_bool_exp
}

"""Ordering options when selecting data from "reminders"."""
input reminders_order_by {
  contact: contacts_order_by
  contact_id: order_by
  id: order_by
  notes: order_by
  time: order_by
}

"""primary key columns input for table: reminders"""
input reminders_pk_columns_input {
  id: Int!
}

"""
select columns of table "reminders"
"""
enum reminders_select_column {
  """column name"""
  contact_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  time
}

"""
input type for updating data in table "reminders"
"""
input reminders_set_input {
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz
}

"""aggregate stddev on columns"""
type reminders_stddev_fields {
  contact_id: Float
  id: Float
}

"""
order by stddev() on columns of table "reminders"
"""
input reminders_stddev_order_by {
  contact_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type reminders_stddev_pop_fields {
  contact_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "reminders"
"""
input reminders_stddev_pop_order_by {
  contact_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type reminders_stddev_samp_fields {
  contact_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "reminders"
"""
input reminders_stddev_samp_order_by {
  contact_id: order_by
  id: order_by
}

"""
Streaming cursor of the table "reminders"
"""
input reminders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: reminders_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input reminders_stream_cursor_value_input {
  contact_id: Int
  id: Int
  notes: String
  time: timestamptz
}

"""aggregate sum on columns"""
type reminders_sum_fields {
  contact_id: Int
  id: Int
}

"""
order by sum() on columns of table "reminders"
"""
input reminders_sum_order_by {
  contact_id: order_by
  id: order_by
}

"""
update columns of table "reminders"
"""
enum reminders_update_column {
  """column name"""
  contact_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  time
}

input reminders_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: reminders_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: reminders_set_input

  """filter the rows which have to be updated"""
  where: reminders_bool_exp!
}

"""aggregate var_pop on columns"""
type reminders_var_pop_fields {
  contact_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "reminders"
"""
input reminders_var_pop_order_by {
  contact_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type reminders_var_samp_fields {
  contact_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "reminders"
"""
input reminders_var_samp_order_by {
  contact_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type reminders_variance_fields {
  contact_id: Float
  id: Float
}

"""
order by variance() on columns of table "reminders"
"""
input reminders_variance_order_by {
  contact_id: order_by
  id: order_by
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "contact_group"
  """
  contact_group(
    """distinct select on columns"""
    distinct_on: [contact_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contact_group_order_by!]

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): [contact_group!]!

  """
  fetch aggregated fields from the table: "contact_group"
  """
  contact_group_aggregate(
    """distinct select on columns"""
    distinct_on: [contact_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contact_group_order_by!]

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): contact_group_aggregate!

  """fetch data from the table: "contact_group" using primary key columns"""
  contact_group_by_pk(contact_id: Int!, group_id: Int!): contact_group

  """
  fetch data from the table in a streaming manner: "contact_group"
  """
  contact_group_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [contact_group_stream_cursor_input]!

    """filter the rows returned"""
    where: contact_group_bool_exp
  ): [contact_group!]!

  """
  fetch data from the table: "contacts"
  """
  contacts(
    """distinct select on columns"""
    distinct_on: [contacts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contacts_order_by!]

    """filter the rows returned"""
    where: contacts_bool_exp
  ): [contacts!]!

  """
  fetch aggregated fields from the table: "contacts"
  """
  contacts_aggregate(
    """distinct select on columns"""
    distinct_on: [contacts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contacts_order_by!]

    """filter the rows returned"""
    where: contacts_bool_exp
  ): contacts_aggregate!

  """fetch data from the table: "contacts" using primary key columns"""
  contacts_by_pk(id: Int!): contacts

  """
  fetch data from the table in a streaming manner: "contacts"
  """
  contacts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [contacts_stream_cursor_input]!

    """filter the rows returned"""
    where: contacts_bool_exp
  ): [contacts!]!

  """
  fetch data from the table: "groups"
  """
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  fetch aggregated fields from the table: "groups"
  """
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """fetch data from the table: "groups" using primary key columns"""
  groups_by_pk(id: Int!): groups

  """
  fetch data from the table in a streaming manner: "groups"
  """
  groups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [groups_stream_cursor_input]!

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """An array relationship"""
  logs(
    """distinct select on columns"""
    distinct_on: [logs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [logs_order_by!]

    """filter the rows returned"""
    where: logs_bool_exp
  ): [logs!]!

  """An aggregate relationship"""
  logs_aggregate(
    """distinct select on columns"""
    distinct_on: [logs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [logs_order_by!]

    """filter the rows returned"""
    where: logs_bool_exp
  ): logs_aggregate!

  """fetch data from the table: "logs" using primary key columns"""
  logs_by_pk(id: Int!): logs

  """
  fetch data from the table in a streaming manner: "logs"
  """
  logs_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [logs_stream_cursor_input]!

    """filter the rows returned"""
    where: logs_bool_exp
  ): [logs!]!

  """An array relationship"""
  reminders(
    """distinct select on columns"""
    distinct_on: [reminders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reminders_order_by!]

    """filter the rows returned"""
    where: reminders_bool_exp
  ): [reminders!]!

  """An aggregate relationship"""
  reminders_aggregate(
    """distinct select on columns"""
    distinct_on: [reminders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reminders_order_by!]

    """filter the rows returned"""
    where: reminders_bool_exp
  ): reminders_aggregate!

  """fetch data from the table: "reminders" using primary key columns"""
  reminders_by_pk(id: Int!): reminders

  """
  fetch data from the table in a streaming manner: "reminders"
  """
  reminders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [reminders_stream_cursor_input]!

    """filter the rows returned"""
    where: reminders_bool_exp
  ): [reminders!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
